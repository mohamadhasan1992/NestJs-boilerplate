workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

stages:
  - install
  - test
  - build
  - deploy

# Base template for Node.js jobs
.node_job_template:
  image: $DOCKER_IMAGE
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  before_script:
    - apk update && apk add --no-cache git
    - npm install -g @nestjs/cli

# Template for Docker-related jobs
.docker_job_template:
  image: docker:24.0.0
  services:
    - docker:24.0.0-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

install_dependencies:
  stage: install
  extends: .node_job_template  # Inherits from node template
  script:
    - npm ci
  variables:
    NODE_ENV: production

run_tests:
  stage: test
  extends: .node_job_template  # Inherits from node template
  script:
    - npm run test
  variables:
    NODE_ENV: test

build_app:
  stage: build
  extends: .node_job_template  # Inherits from node template
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  variables:
    NODE_ENV: production

docker_build:
  stage: build
  extends: .docker_job_template  # Inherits from Docker template
  script:
    - docker build -t yourapp:latest .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag yourapp:latest $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  variables:
    NODE_ENV: production

deploy_to_production:
  stage: deploy
  extends: .node_job_template  
  environment:
    name: production
    url: https://your-production-url.com
  before_script:
    - apk add --no-cache openssh  # Install SSH on the CI runner (you can still override or add to the before_script)
  script:
    - echo "Deploying to production server via SSH"
    # Add your SSH private key to the CI environment (set this in GitLab CI variables)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $DEPLOYMENT_SERVER >> ~/.ssh/known_hosts
    # Connect to the remote server and pull the latest image
    - ssh $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "
        cd /path/to/your/docker-compose-directory &&
        docker-compose pull &&
        docker-compose up -d"
  only:
    - main
  variables:
    NODE_ENV: production
