// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.26.1
// source: proto/messenger.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "pb";

export interface Message {
  conversation: Conversation | undefined;
  sender: string;
  content: string;
  status: string;
  createdAt: Timestamp | undefined;
}

export interface PaginationData {
  page: number;
  limit: number;
  totalDocument: number;
}

export interface Conversation {
  creator: string;
  recipient: string;
  lastMessage: Message | undefined;
  lastMessageSentAt: Timestamp | undefined;
  createdAt: Timestamp | undefined;
}

export interface FindConversationMessageRequest {
  page: number;
  limit: number;
  userId: string;
  conversationId: string;
}

export interface FindConversationMessageResponse {
  data: Message[];
  paginationData: PaginationData | undefined;
}

export interface FindConversationRequest {
  page: number;
  limit: number;
  userId: string;
}

export interface FindConversationResponse {
  data: Conversation[];
  paginationData: PaginationData | undefined;
}

export const PB_PACKAGE_NAME = "pb";

export interface ConversationServiceClient {
  findConversationMessage(request: FindConversationMessageRequest): Observable<FindConversationMessageResponse>;

  findConversation(request: FindConversationRequest): Observable<FindConversationResponse>;
}

export interface ConversationServiceController {
  findConversationMessage(
    request: FindConversationMessageRequest,
  ):
    | Promise<FindConversationMessageResponse>
    | Observable<FindConversationMessageResponse>
    | FindConversationMessageResponse;

  findConversation(
    request: FindConversationRequest,
  ): Promise<FindConversationResponse> | Observable<FindConversationResponse> | FindConversationResponse;
}

export function ConversationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findConversationMessage", "findConversation"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ConversationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ConversationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CONVERSATION_SERVICE_NAME = "ConversationService";
